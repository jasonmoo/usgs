// +build ignore

package main

import (
	"bytes"
	"go/format"
	"io/ioutil"
	"strconv"
	"text/template"
	"unicode"

	"github.com/jasonmoo/usgs/earthquake"
)

var (
	funcMap = template.FuncMap{
		"slug": slug,
	}
	slugs = make(map[string]int)
)

func slug(s string) string {

	rs := []rune(s)
	for i, r := range rs {
		if !unicode.IsLetter(r) && !unicode.IsDigit(r) {
			rs[i] = '_'
		}
	}
	for len(rs) > 0 {
		if rs[0] == '_' {
			rs = rs[1:]
		} else {
			break
		}
	}

	rs[0] = unicode.ToUpper(rs[0])

	var usi int
	for i := 0; i < len(rs); i++ {
		if rs[i] == '_' && usi == 0 {
			usi = i
		} else if (unicode.IsLetter(rs[i]) || unicode.IsDigit(rs[i])) && usi > 0 {
			rs[i] = unicode.ToUpper(rs[i])
			rs = append(rs[:usi], rs[i:]...)
			usi = 0
		}
	}

	s = string(rs)

	if n, exists := slugs[s]; exists {
		s += strconv.Itoa(n)
	}

	slugs[s]++
	return s

}

const constantsTemplate = `package earthquake

// This file is generated by generate_constants.go
// DO NOT EDIT

const (
	{{ range $name := .Catalogs }}Catalog{{ slug $name }} Catalog = {{ printf "%q\n" $name }}{{ end }}
	{{ range $name := .Contributors }}Contributor{{ slug $name }} Contributor = {{ printf "%q\n" $name }}{{ end }}
	{{ range $name := .EventTypes }}EventType{{ slug $name }} EventType = {{ printf "%q\n" $name }}{{ end }}
	{{ range $name := .MagnitudeTypes }}MagnitudeType{{ slug $name }} MagnitudeType = {{ printf "%q\n" $name }}{{ end }}
	{{ range $name := .ProductTypes }}ProductType{{ slug $name }} ProductType = {{ printf "%q\n" $name }}{{ end }}
)
`

func main() {

	resp, err := earthquake.NewClient().GetApplicationInfo()
	if err != nil {
		panic(err)
	}

	var buf bytes.Buffer
	temp := template.Must(template.New("").Funcs(funcMap).Parse(constantsTemplate))
	if err := temp.Execute(&buf, resp); err != nil {
		panic(err)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}

	if err := ioutil.WriteFile("constants.go", data, 0600); err != nil {
		panic(err)
	}

}
